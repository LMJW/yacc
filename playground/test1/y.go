// Code generated by goyacc -p Dex expr.y. DO NOT EDIT.

//line expr.y:2
package main

import __yyfmt__ "fmt"

//line expr.y:2

import (
	"bufio"
	"fmt"
	"os"
	"unicode"
)

//line expr.y:12
type DexSymType struct {
	yys int
	val int
}

const DING = 57346
const DONG = 57347
const DELL = 57348

var DexToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"DING",
	"DONG",
	"DELL",
}
var DexStatenames = [...]string{}

const DexEofCode = 1
const DexErrCode = 2
const DexInitialStackSize = 16

//line expr.y:23

type DexLex struct {
	s   string
	pos int
}

func (l *DexLex) Lex(lval *DexSymType) int {
	var c rune = ' '
	for c == ' ' {
		if l.pos == len(l.s) {
			return 0
		}
		c = rune(l.s[l.pos])
		l.pos += 1
	}
	if unicode.IsDigit(c) {
		lval.val = int(c) - '0'
		return DING
	} else if unicode.IsLower(c) {
		lval.val = int(c) - 'a'
		return DONG
	}
	return DELL
}

func (l *DexLex) Error(s string) {
	fmt.Printf("syntax error: %s\n", s)
}

func main() {
	fi := bufio.NewReader(os.NewFile(0, "stdin"))

	for {
		var eqn string
		var ok bool

		fmt.Printf("equation: ")
		if eqn, ok = readline(fi); ok {
			DexParse(&DexLex{s: eqn})
		} else {
			break
		}
	}
}

func readline(fi *bufio.Reader) (string, bool) {
	s, err := fi.ReadString('\n')
	if err != nil {
		return "", false
	}
	return s, true
}

//line yacctab:1
var DexExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const DexPrivate = 57344

const DexLast = 6

var DexAct = [...]int{

	5, 6, 3, 4, 2, 1,
}
var DexPact = [...]int{

	-2, -1000, -6, -4, -1000, -1000, -1000,
}
var DexPgo = [...]int{

	0, 5, 4, 3,
}
var DexR1 = [...]int{

	0, 1, 2, 3,
}
var DexR2 = [...]int{

	0, 2, 2, 1,
}
var DexChk = [...]int{

	-1000, -1, -2, 4, -3, 6, 5,
}
var DexDef = [...]int{

	0, -2, 0, 0, 1, 3, 2,
}
var DexTok1 = [...]int{

	1,
}
var DexTok2 = [...]int{

	2, 3, 4, 5, 6,
}
var DexTok3 = [...]int{
	0,
}

var DexErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	DexDebug        = 0
	DexErrorVerbose = false
)

type DexLexer interface {
	Lex(lval *DexSymType) int
	Error(s string)
}

type DexParser interface {
	Parse(DexLexer) int
	Lookahead() int
}

type DexParserImpl struct {
	lval  DexSymType
	stack [DexInitialStackSize]DexSymType
	char  int
}

func (p *DexParserImpl) Lookahead() int {
	return p.char
}

func DexNewParser() DexParser {
	return &DexParserImpl{}
}

const DexFlag = -1000

func DexTokname(c int) string {
	if c >= 1 && c-1 < len(DexToknames) {
		if DexToknames[c-1] != "" {
			return DexToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func DexStatname(s int) string {
	if s >= 0 && s < len(DexStatenames) {
		if DexStatenames[s] != "" {
			return DexStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func DexErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !DexErrorVerbose {
		return "syntax error"
	}

	for _, e := range DexErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + DexTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := DexPact[state]
	for tok := TOKSTART; tok-1 < len(DexToknames); tok++ {
		if n := base + tok; n >= 0 && n < DexLast && DexChk[DexAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if DexDef[state] == -2 {
		i := 0
		for DexExca[i] != -1 || DexExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; DexExca[i] >= 0; i += 2 {
			tok := DexExca[i]
			if tok < TOKSTART || DexExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if DexExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += DexTokname(tok)
	}
	return res
}

func Dexlex1(lex DexLexer, lval *DexSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = DexTok1[0]
		goto out
	}
	if char < len(DexTok1) {
		token = DexTok1[char]
		goto out
	}
	if char >= DexPrivate {
		if char < DexPrivate+len(DexTok2) {
			token = DexTok2[char-DexPrivate]
			goto out
		}
	}
	for i := 0; i < len(DexTok3); i += 2 {
		token = DexTok3[i+0]
		if token == char {
			token = DexTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = DexTok2[1] /* unknown char */
	}
	if DexDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", DexTokname(token), uint(char))
	}
	return char, token
}

func DexParse(Dexlex DexLexer) int {
	return DexNewParser().Parse(Dexlex)
}

func (Dexrcvr *DexParserImpl) Parse(Dexlex DexLexer) int {
	var Dexn int
	var DexVAL DexSymType
	var DexDollar []DexSymType
	_ = DexDollar // silence set and not used
	DexS := Dexrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Dexstate := 0
	Dexrcvr.char = -1
	Dextoken := -1 // Dexrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		Dexstate = -1
		Dexrcvr.char = -1
		Dextoken = -1
	}()
	Dexp := -1
	goto Dexstack

ret0:
	return 0

ret1:
	return 1

Dexstack:
	/* put a state and value onto the stack */
	if DexDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", DexTokname(Dextoken), DexStatname(Dexstate))
	}

	Dexp++
	if Dexp >= len(DexS) {
		nyys := make([]DexSymType, len(DexS)*2)
		copy(nyys, DexS)
		DexS = nyys
	}
	DexS[Dexp] = DexVAL
	DexS[Dexp].yys = Dexstate

Dexnewstate:
	Dexn = DexPact[Dexstate]
	if Dexn <= DexFlag {
		goto Dexdefault /* simple state */
	}
	if Dexrcvr.char < 0 {
		Dexrcvr.char, Dextoken = Dexlex1(Dexlex, &Dexrcvr.lval)
	}
	Dexn += Dextoken
	if Dexn < 0 || Dexn >= DexLast {
		goto Dexdefault
	}
	Dexn = DexAct[Dexn]
	if DexChk[Dexn] == Dextoken { /* valid shift */
		Dexrcvr.char = -1
		Dextoken = -1
		DexVAL = Dexrcvr.lval
		Dexstate = Dexn
		if Errflag > 0 {
			Errflag--
		}
		goto Dexstack
	}

Dexdefault:
	/* default state action */
	Dexn = DexDef[Dexstate]
	if Dexn == -2 {
		if Dexrcvr.char < 0 {
			Dexrcvr.char, Dextoken = Dexlex1(Dexlex, &Dexrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if DexExca[xi+0] == -1 && DexExca[xi+1] == Dexstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Dexn = DexExca[xi+0]
			if Dexn < 0 || Dexn == Dextoken {
				break
			}
		}
		Dexn = DexExca[xi+1]
		if Dexn < 0 {
			goto ret0
		}
	}
	if Dexn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Dexlex.Error(DexErrorMessage(Dexstate, Dextoken))
			Nerrs++
			if DexDebug >= 1 {
				__yyfmt__.Printf("%s", DexStatname(Dexstate))
				__yyfmt__.Printf(" saw %s\n", DexTokname(Dextoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Dexp >= 0 {
				Dexn = DexPact[DexS[Dexp].yys] + DexErrCode
				if Dexn >= 0 && Dexn < DexLast {
					Dexstate = DexAct[Dexn] /* simulate a shift of "error" */
					if DexChk[Dexstate] == DexErrCode {
						goto Dexstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if DexDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", DexS[Dexp].yys)
				}
				Dexp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if DexDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", DexTokname(Dextoken))
			}
			if Dextoken == DexEofCode {
				goto ret1
			}
			Dexrcvr.char = -1
			Dextoken = -1
			goto Dexnewstate /* try again in the same state */
		}
	}

	/* reduction by production Dexn */
	if DexDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Dexn, DexStatname(Dexstate))
	}

	Dexnt := Dexn
	Dexpt := Dexp
	_ = Dexpt // guard against "declared and not used"

	Dexp -= DexR2[Dexn]
	// Dexp is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if Dexp+1 >= len(DexS) {
		nyys := make([]DexSymType, len(DexS)*2)
		copy(nyys, DexS)
		DexS = nyys
	}
	DexVAL = DexS[Dexp+1]

	/* consult goto table to find next state */
	Dexn = DexR1[Dexn]
	Dexg := DexPgo[Dexn]
	Dexj := Dexg + DexS[Dexp].yys + 1

	if Dexj >= DexLast {
		Dexstate = DexAct[Dexg]
	} else {
		Dexstate = DexAct[Dexj]
		if DexChk[Dexstate] != -Dexn {
			Dexstate = DexAct[Dexg]
		}
	}
	// dummy call; replaced with literal code
	switch Dexnt {

	}
	goto Dexstack /* stack new state and value */
}
