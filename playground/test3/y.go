// Code generated by goyacc -p Test test.y. DO NOT EDIT.

//line test.y:2
package main

import __yyfmt__ "fmt"

//line test.y:2

import (
	"bufio"
	"fmt"
	"os"
	"regexp"
	"unicode"
)

type ASTnode struct {
	left  *ASTnode
	right *ASTnode
	op    string
	label string
}

func createnode(left, right *ASTnode, op string) *ASTnode {
	var res = ASTnode{}
	res.left = left
	res.right = right
	res.op = op
	return &res
}

func (n *ASTnode) View() {
	fmt.Println(n.op, n.label)
	if n.left != nil {
		n.left.View()
	}
	if n.right != nil {
		n.right.View()
	}
}

//line test.y:39
type TestSymType struct {
	yys  int
	node *ASTnode
}

const ID = 57346
const ATTR = 57347

var TestToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ID",
	"ATTR",
	"'='",
	"'.'",
}
var TestStatenames = [...]string{}

const TestEofCode = 1
const TestErrCode = 2
const TestInitialStackSize = 16

//line test.y:72

type TestLex struct {
	input []string
	pos   int
}

func (l *TestLex) Lex(lval *TestSymType) int {
	for {
		c := l.nextToken(lval)
		return c
	}
}

func (l *TestLex) nextToken(lv *TestSymType) int {
	if l.pos >= len(l.input) {
		return 0
	}
	c := l.input[l.pos]
	l.pos++
	switch {
	case isTitle(c):
		lv.node = &ASTnode{label: c}
		return ID
	case isAttr(c):
		lv.node = &ASTnode{label: c}
		return ATTR
	case c == "=":
		return int('=')
	case c == ".":
		return int('.')
	}
	return 0
}

func isTitle(s string) bool {
	if len(s) == 0 {
		return false
	}
	return unicode.IsUpper(rune(s[0]))
}

func isAttr(s string) bool {
	if len(s) == 0 {
		return false
	}
	return unicode.IsLower(rune(s[0]))
}

func (l *TestLex) Error(s string) {
	fmt.Printf("syntax error: %s\n", s)
}

func main() {
	fi := bufio.NewReader(os.NewFile(0, "stdin"))
	re := regexp.MustCompile(`\w+|[\.=]`)
	for {
		var eqn string
		var ok bool

		fmt.Printf("> ")
		if eqn, ok = readline(fi); ok {
			TestParse(&TestLex{input: re.FindAllString(eqn, -1)})
		} else {
			break
		}
	}
}

func readline(fi *bufio.Reader) (string, bool) {
	s, err := fi.ReadString('\n')
	if err != nil {
		return "", false
	}
	return s, true
}

//line yacctab:1
var TestExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const TestPrivate = 57344

const TestLast = 9

var TestAct = [...]int{

	6, 5, 3, 8, 4, 1, 2, 0, 7,
}
var TestPact = [...]int{

	0, -1000, -1000, -5, -7, 0, -2, -1000, -1000,
}
var TestPgo = [...]int{

	0, 6, 2, 5,
}
var TestR1 = [...]int{

	0, 3, 1, 2,
}
var TestR2 = [...]int{

	0, 1, 3, 3,
}
var TestChk = [...]int{

	-1000, -3, -1, -2, 4, 6, 7, -2, 5,
}
var TestDef = [...]int{

	0, -2, 1, 0, 0, 0, 0, 2, 3,
}
var TestTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 7, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 6,
}
var TestTok2 = [...]int{

	2, 3, 4, 5,
}
var TestTok3 = [...]int{
	0,
}

var TestErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	TestDebug        = 0
	TestErrorVerbose = false
)

type TestLexer interface {
	Lex(lval *TestSymType) int
	Error(s string)
}

type TestParser interface {
	Parse(TestLexer) int
	Lookahead() int
}

type TestParserImpl struct {
	lval  TestSymType
	stack [TestInitialStackSize]TestSymType
	char  int
}

func (p *TestParserImpl) Lookahead() int {
	return p.char
}

func TestNewParser() TestParser {
	return &TestParserImpl{}
}

const TestFlag = -1000

func TestTokname(c int) string {
	if c >= 1 && c-1 < len(TestToknames) {
		if TestToknames[c-1] != "" {
			return TestToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func TestStatname(s int) string {
	if s >= 0 && s < len(TestStatenames) {
		if TestStatenames[s] != "" {
			return TestStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func TestErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !TestErrorVerbose {
		return "syntax error"
	}

	for _, e := range TestErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + TestTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := TestPact[state]
	for tok := TOKSTART; tok-1 < len(TestToknames); tok++ {
		if n := base + tok; n >= 0 && n < TestLast && TestChk[TestAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if TestDef[state] == -2 {
		i := 0
		for TestExca[i] != -1 || TestExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; TestExca[i] >= 0; i += 2 {
			tok := TestExca[i]
			if tok < TOKSTART || TestExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if TestExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += TestTokname(tok)
	}
	return res
}

func Testlex1(lex TestLexer, lval *TestSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = TestTok1[0]
		goto out
	}
	if char < len(TestTok1) {
		token = TestTok1[char]
		goto out
	}
	if char >= TestPrivate {
		if char < TestPrivate+len(TestTok2) {
			token = TestTok2[char-TestPrivate]
			goto out
		}
	}
	for i := 0; i < len(TestTok3); i += 2 {
		token = TestTok3[i+0]
		if token == char {
			token = TestTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = TestTok2[1] /* unknown char */
	}
	if TestDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", TestTokname(token), uint(char))
	}
	return char, token
}

func TestParse(Testlex TestLexer) int {
	return TestNewParser().Parse(Testlex)
}

func (Testrcvr *TestParserImpl) Parse(Testlex TestLexer) int {
	var Testn int
	var TestVAL TestSymType
	var TestDollar []TestSymType
	_ = TestDollar // silence set and not used
	TestS := Testrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Teststate := 0
	Testrcvr.char = -1
	Testtoken := -1 // Testrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		Teststate = -1
		Testrcvr.char = -1
		Testtoken = -1
	}()
	Testp := -1
	goto Teststack

ret0:
	return 0

ret1:
	return 1

Teststack:
	/* put a state and value onto the stack */
	if TestDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", TestTokname(Testtoken), TestStatname(Teststate))
	}

	Testp++
	if Testp >= len(TestS) {
		nyys := make([]TestSymType, len(TestS)*2)
		copy(nyys, TestS)
		TestS = nyys
	}
	TestS[Testp] = TestVAL
	TestS[Testp].yys = Teststate

Testnewstate:
	Testn = TestPact[Teststate]
	if Testn <= TestFlag {
		goto Testdefault /* simple state */
	}
	if Testrcvr.char < 0 {
		Testrcvr.char, Testtoken = Testlex1(Testlex, &Testrcvr.lval)
	}
	Testn += Testtoken
	if Testn < 0 || Testn >= TestLast {
		goto Testdefault
	}
	Testn = TestAct[Testn]
	if TestChk[Testn] == Testtoken { /* valid shift */
		Testrcvr.char = -1
		Testtoken = -1
		TestVAL = Testrcvr.lval
		Teststate = Testn
		if Errflag > 0 {
			Errflag--
		}
		goto Teststack
	}

Testdefault:
	/* default state action */
	Testn = TestDef[Teststate]
	if Testn == -2 {
		if Testrcvr.char < 0 {
			Testrcvr.char, Testtoken = Testlex1(Testlex, &Testrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if TestExca[xi+0] == -1 && TestExca[xi+1] == Teststate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Testn = TestExca[xi+0]
			if Testn < 0 || Testn == Testtoken {
				break
			}
		}
		Testn = TestExca[xi+1]
		if Testn < 0 {
			goto ret0
		}
	}
	if Testn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Testlex.Error(TestErrorMessage(Teststate, Testtoken))
			Nerrs++
			if TestDebug >= 1 {
				__yyfmt__.Printf("%s", TestStatname(Teststate))
				__yyfmt__.Printf(" saw %s\n", TestTokname(Testtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Testp >= 0 {
				Testn = TestPact[TestS[Testp].yys] + TestErrCode
				if Testn >= 0 && Testn < TestLast {
					Teststate = TestAct[Testn] /* simulate a shift of "error" */
					if TestChk[Teststate] == TestErrCode {
						goto Teststack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if TestDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", TestS[Testp].yys)
				}
				Testp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if TestDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", TestTokname(Testtoken))
			}
			if Testtoken == TestEofCode {
				goto ret1
			}
			Testrcvr.char = -1
			Testtoken = -1
			goto Testnewstate /* try again in the same state */
		}
	}

	/* reduction by production Testn */
	if TestDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Testn, TestStatname(Teststate))
	}

	Testnt := Testn
	Testpt := Testp
	_ = Testpt // guard against "declared and not used"

	Testp -= TestR2[Testn]
	// Testp is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if Testp+1 >= len(TestS) {
		nyys := make([]TestSymType, len(TestS)*2)
		copy(nyys, TestS)
		TestS = nyys
	}
	TestVAL = TestS[Testp+1]

	/* consult goto table to find next state */
	Testn = TestR1[Testn]
	Testg := TestPgo[Testn]
	Testj := Testg + TestS[Testp].yys + 1

	if Testj >= TestLast {
		Teststate = TestAct[Testg]
	} else {
		Teststate = TestAct[Testj]
		if TestChk[Teststate] != -Testn {
			Teststate = TestAct[Testg]
		}
	}
	// dummy call; replaced with literal code
	switch Testnt {

	case 1:
		TestDollar = TestS[Testpt-1 : Testpt+1]
//line test.y:51
		{
			TestVAL.node = TestDollar[1].node
			TestDollar[1].node.View()
		}
	case 2:
		TestDollar = TestS[Testpt-3 : Testpt+1]
//line test.y:59
		{
			TestVAL.node = createnode(TestDollar[1].node, TestDollar[3].node, "=")
		}
	case 3:
		TestDollar = TestS[Testpt-3 : Testpt+1]
//line test.y:66
		{
			TestVAL.node = createnode(TestDollar[1].node, TestDollar[3].node, ".")
		}
	}
	goto Teststack /* stack new state and value */
}
