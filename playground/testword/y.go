// Code generated by goyacc -p Word word.y. DO NOT EDIT.

//line word.y:2
package main

import __yyfmt__ "fmt"

//line word.y:2

import (
	"bufio"
	"fmt"
	"os"
	"unicode"
)

//line word.y:13
type WordSymType struct {
	yys  int
	word string
	ch   byte
}

const DING = 57346
const DONG = 57347
const DELL = 57348

var WordToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"DING",
	"DONG",
	"DELL",
}
var WordStatenames = [...]string{}

const WordEofCode = 1
const WordErrCode = 2
const WordInitialStackSize = 16

//line word.y:42

type Result struct {
	s1 string
	p2 string
}

type WordLex struct {
	s      string
	pos    int
	result Result
	err    error
}

func cov(sss ...string) string {
	var res string
	for _, n := range sss {
		res += n
	}
	return res
}

func cat(bytes ...byte) string {
	var out string
	for _, b := range bytes {
		out += string(b)
	}
	return out
}

func (l *WordLex) Lex(lval *WordSymType) int {
	var c rune = ' '
	for c == ' ' {
		if l.pos == len(l.s) {
			return 0
		}
		c = rune(l.s[l.pos])
		l.pos += 1
	}
	// fmt.Printf("%v-%v\n%v\n",lval.ch, lval.word,lval)
	if unicode.IsDigit(c) {
		fmt.Println("Ding")
		lval.word += string(c)
		return DING
	} else if unicode.IsLower(c) {
		lval.word += string(c)
		fmt.Println("Dong")
		return DONG
	} else if unicode.IsUpper(c) {
		fmt.Println("Dell")
		lval.word += string(c)
		return DELL
	}
	return 0
}

func (l *WordLex) Error(s string) {
	fmt.Printf("syntax error: %s\n", s)
}

func main() {
	fi := bufio.NewReader(os.NewFile(0, "stdin"))

	for {
		var eqn string
		var ok bool

		fmt.Printf("input: ")
		if eqn, ok = readline(fi); ok {
			WordParse(&WordLex{s: eqn})
		} else {
			break
		}
	}
}

func readline(fi *bufio.Reader) (string, bool) {
	s, err := fi.ReadString('\n')
	if err != nil {
		return "", false
	}
	return s, true
}

//line yacctab:1
var WordExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const WordPrivate = 57344

const WordLast = 7

var WordAct = [...]int{

	6, 7, 4, 5, 3, 2, 1,
}
var WordPact = [...]int{

	-2, -1000, -1000, -6, -4, -1000, -1000, -1000,
}
var WordPgo = [...]int{

	0, 6, 5, 4, 3,
}
var WordR1 = [...]int{

	0, 1, 2, 3, 4,
}
var WordR2 = [...]int{

	0, 1, 2, 2, 1,
}
var WordChk = [...]int{

	-1000, -1, -2, -3, 4, -4, 6, 5,
}
var WordDef = [...]int{

	0, -2, 1, 0, 0, 2, 4, 3,
}
var WordTok1 = [...]int{

	1,
}
var WordTok2 = [...]int{

	2, 3, 4, 5, 6,
}
var WordTok3 = [...]int{
	0,
}

var WordErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	WordDebug        = 0
	WordErrorVerbose = false
)

type WordLexer interface {
	Lex(lval *WordSymType) int
	Error(s string)
}

type WordParser interface {
	Parse(WordLexer) int
	Lookahead() int
}

type WordParserImpl struct {
	lval  WordSymType
	stack [WordInitialStackSize]WordSymType
	char  int
}

func (p *WordParserImpl) Lookahead() int {
	return p.char
}

func WordNewParser() WordParser {
	return &WordParserImpl{}
}

const WordFlag = -1000

func WordTokname(c int) string {
	if c >= 1 && c-1 < len(WordToknames) {
		if WordToknames[c-1] != "" {
			return WordToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func WordStatname(s int) string {
	if s >= 0 && s < len(WordStatenames) {
		if WordStatenames[s] != "" {
			return WordStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func WordErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !WordErrorVerbose {
		return "syntax error"
	}

	for _, e := range WordErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + WordTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := WordPact[state]
	for tok := TOKSTART; tok-1 < len(WordToknames); tok++ {
		if n := base + tok; n >= 0 && n < WordLast && WordChk[WordAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if WordDef[state] == -2 {
		i := 0
		for WordExca[i] != -1 || WordExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; WordExca[i] >= 0; i += 2 {
			tok := WordExca[i]
			if tok < TOKSTART || WordExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if WordExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += WordTokname(tok)
	}
	return res
}

func Wordlex1(lex WordLexer, lval *WordSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = WordTok1[0]
		goto out
	}
	if char < len(WordTok1) {
		token = WordTok1[char]
		goto out
	}
	if char >= WordPrivate {
		if char < WordPrivate+len(WordTok2) {
			token = WordTok2[char-WordPrivate]
			goto out
		}
	}
	for i := 0; i < len(WordTok3); i += 2 {
		token = WordTok3[i+0]
		if token == char {
			token = WordTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = WordTok2[1] /* unknown char */
	}
	if WordDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", WordTokname(token), uint(char))
	}
	return char, token
}

func WordParse(Wordlex WordLexer) int {
	return WordNewParser().Parse(Wordlex)
}

func (Wordrcvr *WordParserImpl) Parse(Wordlex WordLexer) int {
	var Wordn int
	var WordVAL WordSymType
	var WordDollar []WordSymType
	_ = WordDollar // silence set and not used
	WordS := Wordrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Wordstate := 0
	Wordrcvr.char = -1
	Wordtoken := -1 // Wordrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		Wordstate = -1
		Wordrcvr.char = -1
		Wordtoken = -1
	}()
	Wordp := -1
	goto Wordstack

ret0:
	return 0

ret1:
	return 1

Wordstack:
	/* put a state and value onto the stack */
	if WordDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", WordTokname(Wordtoken), WordStatname(Wordstate))
	}

	Wordp++
	if Wordp >= len(WordS) {
		nyys := make([]WordSymType, len(WordS)*2)
		copy(nyys, WordS)
		WordS = nyys
	}
	WordS[Wordp] = WordVAL
	WordS[Wordp].yys = Wordstate

Wordnewstate:
	Wordn = WordPact[Wordstate]
	if Wordn <= WordFlag {
		goto Worddefault /* simple state */
	}
	if Wordrcvr.char < 0 {
		Wordrcvr.char, Wordtoken = Wordlex1(Wordlex, &Wordrcvr.lval)
	}
	Wordn += Wordtoken
	if Wordn < 0 || Wordn >= WordLast {
		goto Worddefault
	}
	Wordn = WordAct[Wordn]
	if WordChk[Wordn] == Wordtoken { /* valid shift */
		Wordrcvr.char = -1
		Wordtoken = -1
		WordVAL = Wordrcvr.lval
		Wordstate = Wordn
		if Errflag > 0 {
			Errflag--
		}
		goto Wordstack
	}

Worddefault:
	/* default state action */
	Wordn = WordDef[Wordstate]
	if Wordn == -2 {
		if Wordrcvr.char < 0 {
			Wordrcvr.char, Wordtoken = Wordlex1(Wordlex, &Wordrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if WordExca[xi+0] == -1 && WordExca[xi+1] == Wordstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Wordn = WordExca[xi+0]
			if Wordn < 0 || Wordn == Wordtoken {
				break
			}
		}
		Wordn = WordExca[xi+1]
		if Wordn < 0 {
			goto ret0
		}
	}
	if Wordn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Wordlex.Error(WordErrorMessage(Wordstate, Wordtoken))
			Nerrs++
			if WordDebug >= 1 {
				__yyfmt__.Printf("%s", WordStatname(Wordstate))
				__yyfmt__.Printf(" saw %s\n", WordTokname(Wordtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Wordp >= 0 {
				Wordn = WordPact[WordS[Wordp].yys] + WordErrCode
				if Wordn >= 0 && Wordn < WordLast {
					Wordstate = WordAct[Wordn] /* simulate a shift of "error" */
					if WordChk[Wordstate] == WordErrCode {
						goto Wordstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if WordDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", WordS[Wordp].yys)
				}
				Wordp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if WordDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", WordTokname(Wordtoken))
			}
			if Wordtoken == WordEofCode {
				goto ret1
			}
			Wordrcvr.char = -1
			Wordtoken = -1
			goto Wordnewstate /* try again in the same state */
		}
	}

	/* reduction by production Wordn */
	if WordDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Wordn, WordStatname(Wordstate))
	}

	Wordnt := Wordn
	Wordpt := Wordp
	_ = Wordpt // guard against "declared and not used"

	Wordp -= WordR2[Wordn]
	// Wordp is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if Wordp+1 >= len(WordS) {
		nyys := make([]WordSymType, len(WordS)*2)
		copy(nyys, WordS)
		WordS = nyys
	}
	WordVAL = WordS[Wordp+1]

	/* consult goto table to find next state */
	Wordn = WordR1[Wordn]
	Wordg := WordPgo[Wordn]
	Wordj := Wordg + WordS[Wordp].yys + 1

	if Wordj >= WordLast {
		Wordstate = WordAct[Wordg]
	} else {
		Wordstate = WordAct[Wordj]
		if WordChk[Wordstate] != -Wordn {
			Wordstate = WordAct[Wordg]
		}
	}
	// dummy call; replaced with literal code
	switch Wordnt {

	case 1:
		WordDollar = WordS[Wordpt-1 : Wordpt+1]
//line word.y:23
		{
			fmt.Printf("--%s--", WordDollar[1].word)
		}
	case 2:
		WordDollar = WordS[Wordpt-2 : Wordpt+1]
//line word.y:28
		{
			WordVAL.word = cov(WordDollar[1].word, WordDollar[2].word)
		}
	case 3:
		WordDollar = WordS[Wordpt-2 : Wordpt+1]
//line word.y:33
		{
			WordVAL.word = cat(WordDollar[1].ch, WordDollar[2].ch)
		}
	case 4:
		WordDollar = WordS[Wordpt-1 : Wordpt+1]
//line word.y:38
		{
			WordVAL.word = cat(WordDollar[1].ch)
		}
	}
	goto Wordstack /* stack new state and value */
}
